name: Build and Deploy with Docker Compose

on:
  push:
    branches:
      - Forgotpassword-and-otp-sending  # Trigger workflow on push to this branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Check out code
        uses: actions/checkout@v3

      # Step 2: Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Python dependencies
        working-directory: ./backend
        run: |
          echo "Installing dependencies..."
          pip install -r requirements.txt

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Step 4: Log in to Azure Container Registry
      - name: Log in to Azure Container Registry
        run: echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} --username ${{ secrets.ACR_USERNAME }} --password-stdin

      # Step 5: Build and Push Docker Image
      - name: Build and push Docker image
        env:
          SMTP_EMAIL: ${{ secrets.SMTP_EMAIL }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          docker-compose build
          docker tag backend:latest ${{ secrets.ACR_LOGIN_SERVER }}/django-app:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/django-app:latest

      # Step 6: Deploy to Azure Web App
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: Reptrack-production
          images: ${{ secrets.ACR_LOGIN_SERVER }}/django-app:latest

      # Step 7: Print directories in the server
      - name: Print directories in server
        run: |
          echo "Listing directories in the server:"
          ls -la

      # Step 8: Run Django server from backend directory
      - name: Run Django server
        working-directory: ./backend
        run: |
          echo "Starting Django server..."
          python manage.py runserver 0.0.0.0:8000 &
          sleep 10  # Allow server to start

      # Step 9: Check if the web app is running
      - name: Verify web app status
        run: |
          echo "Checking if the web app is running..."
          curl -I http://localhost:8000 || echo "Web app is not running."
